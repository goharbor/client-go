// Code generated by go-swagger; DO NOT EDIT.

package project_metadata

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteProjectMetadataParams creates a new DeleteProjectMetadataParams object
// with the default values initialized.
func NewDeleteProjectMetadataParams() *DeleteProjectMetadataParams {
	var (
		xIsResourceNameDefault = bool(false)
	)
	return &DeleteProjectMetadataParams{
		XIsResourceName: &xIsResourceNameDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProjectMetadataParamsWithTimeout creates a new DeleteProjectMetadataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteProjectMetadataParamsWithTimeout(timeout time.Duration) *DeleteProjectMetadataParams {
	var (
		xIsResourceNameDefault = bool(false)
	)
	return &DeleteProjectMetadataParams{
		XIsResourceName: &xIsResourceNameDefault,

		timeout: timeout,
	}
}

// NewDeleteProjectMetadataParamsWithContext creates a new DeleteProjectMetadataParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteProjectMetadataParamsWithContext(ctx context.Context) *DeleteProjectMetadataParams {
	var (
		xIsResourceNameDefault = bool(false)
	)
	return &DeleteProjectMetadataParams{
		XIsResourceName: &xIsResourceNameDefault,

		Context: ctx,
	}
}

// NewDeleteProjectMetadataParamsWithHTTPClient creates a new DeleteProjectMetadataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteProjectMetadataParamsWithHTTPClient(client *http.Client) *DeleteProjectMetadataParams {
	var (
		xIsResourceNameDefault = bool(false)
	)
	return &DeleteProjectMetadataParams{
		XIsResourceName: &xIsResourceNameDefault,
		HTTPClient:      client,
	}
}

/*DeleteProjectMetadataParams contains all the parameters to send to the API endpoint
for the delete project metadata operation typically these are written to a http.Request
*/
type DeleteProjectMetadataParams struct {

	/*XIsResourceName
	  The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.

	*/
	XIsResourceName *bool
	/*XRequestID
	  An unique ID for the request

	*/
	XRequestID *string
	/*MetaName
	  The name of metadata.

	*/
	MetaName string
	/*ProjectNameOrID
	  The name or id of the project

	*/
	ProjectNameOrID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithTimeout(timeout time.Duration) *DeleteProjectMetadataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithContext(ctx context.Context) *DeleteProjectMetadataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithHTTPClient(client *http.Client) *DeleteProjectMetadataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXIsResourceName adds the xIsResourceName to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithXIsResourceName(xIsResourceName *bool) *DeleteProjectMetadataParams {
	o.SetXIsResourceName(xIsResourceName)
	return o
}

// SetXIsResourceName adds the xIsResourceName to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetXIsResourceName(xIsResourceName *bool) {
	o.XIsResourceName = xIsResourceName
}

// WithXRequestID adds the xRequestID to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithXRequestID(xRequestID *string) *DeleteProjectMetadataParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetXRequestID(xRequestID *string) {
	o.XRequestID = xRequestID
}

// WithMetaName adds the metaName to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithMetaName(metaName string) *DeleteProjectMetadataParams {
	o.SetMetaName(metaName)
	return o
}

// SetMetaName adds the metaName to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetMetaName(metaName string) {
	o.MetaName = metaName
}

// WithProjectNameOrID adds the projectNameOrID to the delete project metadata params
func (o *DeleteProjectMetadataParams) WithProjectNameOrID(projectNameOrID string) *DeleteProjectMetadataParams {
	o.SetProjectNameOrID(projectNameOrID)
	return o
}

// SetProjectNameOrID adds the projectNameOrId to the delete project metadata params
func (o *DeleteProjectMetadataParams) SetProjectNameOrID(projectNameOrID string) {
	o.ProjectNameOrID = projectNameOrID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProjectMetadataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XIsResourceName != nil {

		// header param X-Is-Resource-Name
		if err := r.SetHeaderParam("X-Is-Resource-Name", swag.FormatBool(*o.XIsResourceName)); err != nil {
			return err
		}

	}

	if o.XRequestID != nil {

		// header param X-Request-Id
		if err := r.SetHeaderParam("X-Request-Id", *o.XRequestID); err != nil {
			return err
		}

	}

	// path param meta_name
	if err := r.SetPathParam("meta_name", o.MetaName); err != nil {
		return err
	}

	// path param project_name_or_id
	if err := r.SetPathParam("project_name_or_id", o.ProjectNameOrID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
